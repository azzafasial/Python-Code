# -*- coding: utf-8 -*-
"""Image_Data_Analysis_Using_Python and histogram .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1psU7n8h5a8hLNPQYVna3Nvk0regjpTYN
"""

# Commented out IPython magic to ensure Python compatibility.
import imageio
import matplotlib.pyplot as plt
# %matplotlib inline
pic = imageio.imread('landkh.jpg')
plt.figure(figsize = (5,5))
plt.imshow(pic)
pic1 = imageio.imread('griv.jpg')
plt.figure(figsize = (5,5))
plt.imshow(pic1)

print('Type of the image : ' , type(pic)) 
print('Shape of the image : {}'.format(pic.shape)) 
print('Image Hight {}'.format(pic.shape[0])) 
print('Image Width {}'.format(pic.shape[1])) 
print('Dimension of Image {}'.format(pic.ndim))
print('Image size {}'.format(pic.size)) 
print('Maximum RGB value in this image {}'.format(pic.max())) 
print('Minimum RGB value in this image {}'.format(pic.min()))
print('------------------------------------')
print('Type of the image : ' , type(pic1)) 
print('Shape of the image : {}'.format(pic1.shape)) 
print('Image Hight {}'.format(pic1.shape[0])) 
print('Image Width {}'.format(pic1.shape[1])) 
print('Dimension of Image {}'.format(pic1.ndim))
print('Image size {}'.format(pic1.size)) 
print('Maximum RGB value in this image {}'.format(pic1.max())) 
print('Minimum RGB value in this image {}'.format(pic1.min()))

import numpy as np
pic = imageio.imread('landkh.jpg')

fig, ax = plt.subplots(nrows = 1, ncols=3, figsize=(15,5))

for c, ax in zip(range(3), ax):
    
    # create zero matrix
    split_img = np.zeros(pic.shape, dtype="uint8") # 'dtype' by default: 'numpy.float64'
    
    # assing each channel 
    split_img[ :, :, c] = pic[ :, :, c]
    
    # display each channel
    ax.imshow(split_img)

pic = imageio.imread('landkh.jpg')

gray = lambda rgb : np.dot(rgb[... , :3] , [0.299 , 0.587, 0.114]) 
gray = gray(pic)  
plt.figure( figsize = (5,5))
plt.imshow(gray, cmap = plt.get_cmap(name = 'gray'))
#plt.show()

plt.subplot(1,2,1)
plt.imshow(gray,cmap='gray')
plt.title('image')
plt.xticks([])
plt.yticks([])

plt.subplot(1,2,2)
plt.hist(gray.ravel(),256,[0,255])
plt.title('histogram')

plt.show()

pic1 = imageio.imread('griv.jpg') 
gray = lambda rgb : np.dot(rgb[... , :3] , [0.299 , 0.587, 0.114])  
gray = gray(pic1) 
plt.figure( figsize = (5,5))  
plt.imshow(gray, cmap = plt.get_cmap(name = 'gray')) 
plt.show()

plt.subplot(1,2,1)
plt.imshow(gray,cmap='gray')
plt.title('image')
plt.xticks([])
plt.yticks([])

plt.subplot(1,2,2)
plt.hist(gray.ravel(),256,[0,255])
plt.title('Gravityhistogram')

plt.show()

pic = imageio.imread('landkh.jpg') 
#plt.figure(figsize=(5,5)) 
#plt.imshow(pic) 
#plt.show()
low_pixel = pic < 20  
# to ensure of it let's check if all values in low_pixel are True or not 
if low_pixel.any() == True:     
    print(low_pixel.shape)
print(pic.shape)
print(low_pixel.shape)
#------------------------------
print('-----------')
#----------
pic1 = imageio.imread('griv.jpg') 
#plt.figure(figsize=(5,5)) 
#plt.imshow(pic1) 
#plt.show()
low_pixel = pic1 < 20  
# to ensure of it let's check if all values in low_pixel are True or not 
if low_pixel.any() == True:     
    print(low_pixel.shape)
print(pic1.shape)
print(low_pixel.shape)

# randomly choose a value 
import random

# load the orginal image

pic = imageio.imread('landkh.jpg')

# set value randomly range from 25 to 225 - these value also randomly choosen
pic[low_pixel] = random.randint(25,225)
# display the image
plt.figure( figsize = (5,5))
plt.imshow(pic)
plt.show()
#-------------------------
gray = lambda rgb : np.dot(rgb[... , :3] , [0.299 , 0.587, 0.114]) 
gray = gray(pic)  
plt.figure( figsize = (5,5))
plt.imshow(gray, cmap = plt.get_cmap(name = 'gray'))
#plt.show()

plt.subplot(1,2,1)
plt.imshow(gray,cmap='gray')
plt.title('image')
plt.xticks([])
plt.yticks([])

plt.subplot(1,2,2)
plt.hist(gray.ravel(),256,[0,255])
plt.title('histogram')

plt.show()
#--------------------------------------

import cv2
import numpy as np
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow

img = pic
#img = cv2.imread('griv.jpg', -1)
#cv2_imshow(img)

color = ('b','g','r')
for channel,col in enumerate(color):
    histr = cv2.calcHist([img],[channel],None,[256],[0,256])
    plt.plot(histr,color = col)
    plt.xlim([0,256])
plt.title('Histogram for color scale picture')
plt.show()

import cv2
import numpy as np
from matplotlib import pyplot as plt
from google.colab.patches import cv2_imshow

#img = pic
img = cv2.imread('griv.jpg', -1)
#cv2_imshow(img)

color = ('b','g','r')
for channel,col in enumerate(color):
    histr = cv2.calcHist([img],[channel],None,[256],[0,256])
    plt.plot(histr,color = col)
    plt.xlim([0,256])
plt.title('Histogram for color scale picture')
plt.show()

# import necessary packages
import cv2
import matplotlib.pyplot as plt

# load image
#imageObj = cv2.imread('landkh.jpg')
imageObj = pic

# to avoid grid lines
plt.axis("off")
plt.title("Original Image")
plt.imshow(cv2.cvtColor(imageObj, cv2.COLOR_BGR2RGB))
plt.show()

# Get RGB data from image
blue_color = cv2.calcHist([imageObj], [0], None, [256], [0, 256])
red_color = cv2.calcHist([imageObj], [1], None, [256], [0, 256])
green_color = cv2.calcHist([imageObj], [2], None, [256], [0, 256])

# Separate Histograms for each color
plt.subplot(3, 1, 1)
plt.title("histogram of Blue")
plt.hist(blue_color, color="blue")

plt.subplot(3, 1, 2)
plt.title("histogram of Green")
plt.hist(green_color, color="green")

plt.subplot(3, 1, 3)
plt.title("histogram of Red")
plt.hist(red_color, color="red")

# for clear view
plt.tight_layout()
plt.show()

# combined histogram
plt.title("Histogram of all RGB Colors")
plt.hist(blue_color, color="blue")
plt.hist(green_color, color="green")
plt.hist(red_color, color="red")
plt.show()

# import necessary packages
import cv2
import matplotlib.pyplot as plt

# load image
imageObj = cv2.imread('griv.jpg')
#imageObj = pic

# to avoid grid lines
plt.axis("off")
plt.title("Original Image")
plt.imshow(cv2.cvtColor(imageObj, cv2.COLOR_BGR2RGB))
plt.show()

# Get RGB data from image
blue_color = cv2.calcHist([imageObj], [0], None, [256], [0, 256])
red_color = cv2.calcHist([imageObj], [1], None, [256], [0, 256])
green_color = cv2.calcHist([imageObj], [2], None, [256], [0, 256])

# Separate Histograms for each color
plt.subplot(3, 1, 1)
plt.title("histogram of Blue")
plt.hist(blue_color, color="blue")

plt.subplot(3, 1, 2)
plt.title("histogram of Green")
plt.hist(green_color, color="green")

plt.subplot(3, 1, 3)
plt.title("histogram of Red")
plt.hist(red_color, color="red")

# for clear view
plt.tight_layout()
plt.show()

# combined histogram
plt.title("Histogram of all RGB Colors")
plt.hist(blue_color, color="blue")
plt.hist(green_color, color="green")
plt.hist(red_color, color="red")
plt.show()

